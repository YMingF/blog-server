// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             Int       @id @default(autoincrement())
  username       String    @unique
  password       String
  uuid           String    @unique
  followersCount Int       @default(0)
  followingCount Int       @default(0)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  posts          Post[]   @relation("UserPosts")
  comments       Comment[] @relation("UserComments")
  following      Follow[]  @relation("UserFollowing")
  followers      Follow[]  @relation("UserFollowers")
}

model Post {
  id          Int       @id @default(autoincrement())
  title       String    @db.VarChar(255)
  content     String
  uuid        String    @unique
  likesUserId String[]
  likesAmt    Int
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  comments    Comment[] @relation("PostComments")
  User        User      @relation("UserPosts", fields: [userId], references: [id])
  userId      Int
}

model Comment {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  uuid      String   @unique
  content   String
  postId    Int
  userId    Int
  post      Post     @relation("PostComments", fields: [postId], references: [id], onDelete: Cascade)
  user      User     @relation("UserComments", fields: [userId], references: [id], onDelete: Cascade)
}

model Follow {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  followerId  Int      // 关注人ID
  followingId Int      // 被关注人ID
  follower    User     @relation("UserFollowing", fields: [followerId], references: [id], onDelete: Cascade)
  following   User     @relation("UserFollowers", fields: [followingId], references: [id], onDelete: Cascade)
  @@unique([followerId, followingId])  // 防止重复关注
  @@index([followerId])
  @@index([followingId])
}
